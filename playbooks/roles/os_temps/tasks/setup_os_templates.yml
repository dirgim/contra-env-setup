---
- set_fact:
    params: []

- name: "{{ container_config_name }} :: Get template name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[1].metadata.name' | sed 's/\"//g'"
  register: "template_name_file"

- debug:
    msg: "{{ container_config_name }} :: Template Name in file: {{ template_name_file.stdout }}"

- name: "{{ container_config_name }} :: Get template name from querying the cluster"
  shell: "{{ oc_bin }} get templates | awk '{print $1}' | egrep '^{{ template_name_file.stdout }}$'"
  register: "template_name_check"
  ignore_errors: yes

- debug:
    msg: "{{ container_config_name }} :: Template Name from querying the cluster: {{ template_name_check.stdout }}"

- name: "{{ container_config_name }} :: Updating buildconfig {{ template_name }}"
  shell: "{{ oc_bin }} replace -f {{ template_name }}"
  when: template_name_check.stdout != ""

- name: "{{ container_config_name }} :: Creating buildconfig {{ template_name }}"
  shell: "{{ oc_bin }} create -f {{ template_name }}"
  when: template_name_check.stdout == ""

# imagestreams
- name: "{{ container_config_name }} :: Get imagestream name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[0].metadata.name' | sed 's/\"//g'"
  register: "image_stream_name_file"

- name: "{{ container_config_name }} :: Get imagestream from querying the cluster"
  shell: "{{ oc_bin }} get imagestream | awk '{print $1}' | egrep '^{{ image_stream_name_file.stdout }}$'"
  ignore_errors: yes
  register: "image_stream_name_check"

- debug:
    msg: "{{ container_config_name }} :: Imagestream Name from querying the cluster: {{ image_stream_name_check.stdout }}"

- debug:
    msg: "{{ container_config_name }} :: Imagestream {{ image_stream_name_check.stdout }} already exists"
  when: image_stream_name_check.stdout != ""

# buildconfigs
- name: "{{ container_config_name }} :: Get buildconfig name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[1].metadata.name' | sed 's/\"//g'"
  register: "build_config_name_file"

- name: "{{ container_config_name }} :: Get buildconfig from querying the cluster"
  shell: "{{ oc_bin }} get buildconfig | awk '{print $1}' | egrep '^{{ build_config_name_file.stdout }}$'"
  ignore_errors: yes
  register: "build_config_name_check"

- debug:
    msg: "{{ container_config_name }} :: Buildconfig Name from querying the cluster: {{ build_config_name_check.stdout }}"

- debug:
    msg: "{{ container_config_name }} :: Buildconfig {{ build_config_name_check.stdout }} already exists"
  when: build_config_name_check.stdout != ""

- name: "{{ container_config_name }} :: Check if the template being loaded contains the parameter..."
  shell: "{{ oc_bin }} describe template {{ template_name_file.stdout }} | grep {{ item.key }}"
  register: check_temp_params
  with_items: "{{ PARAMS }}"
  ignore_errors: yes

- set_fact:
    params: "{{ params | default([]) }} + [ '-p {{ item.item.key }}={{ item.item.val }}' ]"
  when: (item.stdout != "" and item.item.val != "")
  with_items: "{{ check_temp_params.results }}"

# Set all the necessary facts for building of templates and subsequent retries
- set_fact:
    build_results: "{{ build_results|default({}) | combine( {template_name: false} ) }}"
    build_config_name_files: "{{ build_config_name_files|default({}) | combine( {template_name: build_config_name_file.stdout}) }}"
    build_config_name_checks: "{{ build_config_name_checks|default({}) | combine( {template_name: build_config_name_check.stdout}) }}"
    image_stream_name_checks: "{{ image_stream_name_checks|default({}) | combine( {template_name: image_stream_name_check.stdout}) }}"
    template_name_files: "{{ template_name_files|default({}) | combine( {template_name: template_name_file.stdout}) }}"
    build_params: "{{ build_params|default({}) | combine( {template_name: params}) }}"




